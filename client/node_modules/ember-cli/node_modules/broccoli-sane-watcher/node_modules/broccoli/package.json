{
  "name": "broccoli",
  "description": "Fast client-side asset builder",
  "version": "0.12.3",
  "author": {
    "name": "Jo Liss",
    "email": "joliss42@gmail.com"
  },
  "main": "lib/index.js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/broccolijs/broccoli"
  },
  "dependencies": {
    "broccoli-kitchen-sink-helpers": "^0.2.0",
    "commander": "^2.0.0",
    "connect": "~2.14.1",
    "findup-sync": "^0.1.2",
    "handlebars": "^1.3.0",
    "mime": "^1.2.11",
    "ncp": "^0.5.0",
    "rsvp": "^3.0.6",
    "tiny-lr": "0.0.5"
  },
  "devDependencies": {
    "jshint": "~2.3.0",
    "tap": "^0.4.8"
  },
  "scripts": {
    "test": "jshint lib/*.js test/*.js && tap --stderr --timeout 2 ./test/*_test.js"
  },
  "readme": "# Broccoli\n\n<img src=\"logo/broccoli-logo-small.generated.png\" align=\"right\" height=\"150\">\n\n[![Build Status](https://travis-ci.org/broccolijs/broccoli.png?branch=master)](https://travis-ci.org/broccolijs/broccoli)\n\nA fast, reliable asset pipeline, supporting constant-time rebuilds and compact\nbuild definitions. Comparable to the Rails asset pipeline in scope, though it\nruns on Node and is backend-agnostic. For background and architecture, see the\n[introductory blog post](http://www.solitr.com/blog/2014/02/broccoli-first-release/).\n\nFor the command line interface, see\n[broccoli-cli](https://github.com/broccolijs/broccoli-cli).\n\n**This is 0.x beta software.**\n\n## Installation\n\n```bash\nnpm install --save-dev broccoli\nnpm install --global broccoli-cli\n```\n\n## Getting Started\n\nCheck out\n[broccoli-sample-app](https://github.com/broccolijs/broccoli-sample-app).\n\n## Brocfile.js\n\nA `Brocfile.js` file in the project root contains the build specification. It\nshould export a tree which may simply be the directory path (as a string). To\nbuild more advanced output trees you may want to use some of the plugins listed\nbelow.\n\nThe following would export the `app/` subdirectory as a tree:\n\n```js\nmodule.exports = 'app'\n```\n\nAlternatively, the following would export the `app/` subdirectory as `appkit/`:\n\n```js\nvar pickFiles = require('broccoli-static-compiler')\n\nmodule.exports = pickFiles('app', {\n  srcDir: '/',\n  destDir: 'appkit'\n})\n```\n\n## Plugins\n\n* [broccoli-absurd-filter](https://github.com/Xulai/broccoli-absurd-filter)\n* [broccoli-autoprefixer](https://github.com/sindresorhus/broccoli-autoprefixer)\n* [broccoli-bake-handlebars](https://github.com/thomasboyt/broccoli-bake-handlebars)\n* [broccoli-bower](https://github.com/joliss/broccoli-bower)\n* [broccoli-closure-compiler](https://github.com/sindresorhus/broccoli-closure-compiler)\n* [broccoli-coffee](https://github.com/joliss/broccoli-coffee)\n* [broccoli-csso](https://github.com/sindresorhus/broccoli-csso)\n* [broccoli-defeatureify](https://github.com/sindresorhus/broccoli-defeatureify)\n* [broccoli-dust](https://github.com/sindresorhus/broccoli-dust)\n* [broccoli-ember-script](https://github.com/aradabaugh/broccoli-ember-script)\n* [broccoli-es6-concatenator](https://github.com/joliss/broccoli-es6-concatenator)\n* [broccoli-es6-module-filter](https://github.com/rpflorence/broccoli-es6-module-filter)\n* [broccoli-es6-transpiler](https://github.com/sindresorhus/broccoli-es6-transpiler)\n* [broccoli-file-creator](https://github.com/rjackson/broccoli-file-creator)\n* [broccoli-file-mover](https://github.com/rjackson/broccoli-file-mover)\n* [broccoli-file-remover](https://github.com/rjackson/broccoli-file-remover)\n* [broccoli-fixturify](https://github.com/rjackson/broccoli-fixturify)\n* [broccoli-htmlmin](https://github.com/sindresorhus/broccoli-htmlmin)\n* [broccoli-imagemin](https://github.com/Xulai/broccoli-imagemin)\n* [broccoli-jade](https://github.com/sindresorhus/broccoli-jade)\n* [broccoli-jstransform](https://github.com/aexmachina/broccoli-jstransform)\n* [broccoli-merge-trees](https://github.com/broccolijs/broccoli-merge-trees)\n* [broccoli-nunjucks](https://github.com/sindresorhus/broccoli-nunjucks)\n* [broccoli-pages](https://github.com/quandl/broccoli-pages)\n* [broccoli-regenerator](https://github.com/sindresorhus/broccoli-regenerator)\n* [broccoli-replace](https://github.com/outaTiME/broccoli-replace)\n* [broccoli-rev](https://github.com/mjijackson/broccoli-rev)\n* [broccoli-sass](https://github.com/joliss/broccoli-sass)\n* [broccoli-select](https://github.com/mjijackson/broccoli-select)\n* [broccoli-static-compiler](https://github.com/joliss/broccoli-static-compiler)\n* [broccoli-strip-debug](https://github.com/sindresorhus/broccoli-strip-debug)\n* [broccoli-strip-json-comments](https://github.com/sindresorhus/broccoli-strip-json-comments)\n* [broccoli-svgo](https://github.com/sindresorhus/broccoli-svgo)\n* [broccoli-sweetjs](https://github.com/sindresorhus/broccoli-sweetjs)\n* [broccoli-swig](https://github.com/shanielh/broccoli-swig)\n* [broccoli-template](https://github.com/joliss/broccoli-template)\n* [broccoli-traceur](https://github.com/sindresorhus/broccoli-traceur)\n* [broccoli-uglify-js](https://github.com/joliss/broccoli-uglify-js)\n* [broccoli-uncss](https://github.com/sindresorhus/broccoli-uncss)\n\nMore plugins may be found under the [broccoli-plugin\nkeyword](https://www.npmjs.org/browse/keyword/broccoli-plugin) on npm.\n\n### Running Broccoli, Directly or Through Other Tools\n\n* [broccoli-timepiece](https://github.com/rjackson/broccoli-timepiece)\n* [grunt-broccoli](https://github.com/quandl/grunt-broccoli)\n* [grunt-broccoli-build](https://github.com/ericf/grunt-broccoli-build)\n\n### Helpers\n\nShared code for writing plugins.\n\n* [broccoli-caching-writer](https://github.com/rjackson/broccoli-caching-writer)\n* [broccoli-filter](https://github.com/broccolijs/broccoli-filter)\n* [broccoli-writer](https://github.com/broccolijs/broccoli-writer)\n* [node-quick-temp](https://github.com/joliss/node-quick-temp)\n\n## Plugin API Specification\n\nBroccoli defines a single plugin API: a tree. A tree object represents a tree\n(directory hierarchy) of files that can be regenerated on each build.\n\nBy convention, plugins will export a function that takes one or more input\ntrees, and returns an output tree object.\n\nA tree object must supply two methods that will be called by Broccoli:\n\n### `tree.read(readTree)`\n\nThe `.read` method must return a path or a promise for a path, containing the\ntree contents.\n\nIt receives a `readTree` function argument from Broccoli. If `.read` needs to\nread other trees, it must not call `otherTree.read` directly. Instead, it must\ncall `readTree(otherTree)`, which returns a promise for the path containing\n`otherTree`'s contents. It must not call `readTree` again until the promise\nhas resolved; that is, it cannot call `readTree` on multiple trees in\nparallel.\n\nBroccoli will call the `.read` method repeatedly to rebuild the tree, but at\nmost once per rebuild; that is, if a tree is used multiple times in a build\ndefinition, Broccoli will reuse the path returned instead of calling `.read`\nagain.\n\nThe `.read` method is responsible for creating a new temporary directory to\nstore the tree contents in. Subsequent invocations of `.read` should remove\ntemporary directories created in previous invocations.\n\n### `tree.cleanup()`\n\nFor every tree whose `.read` method was called one or more times, the\n`.cleanup` method will be called exactly once. No further `.read` calls will\nfollow `.cleanup`. The `.cleanup` method should remove all temporary\ndirectories created by `.read`.\n\n### Debugging\n\n\n#### Errors\n\nWhen it is known which file caused a given error, plugin authors can make errors\neasier to track down by setting the `.file` property on the generated error.\n\nThis `.file` property is used by both the console logging, and the server middleware\nto display more helpful error messages.\n\n#### Descriptive Naming\n\nAs of 0.11 Broccoli prints a log of any trees that took a significant amount of the total\nbuild time to assist in finding which trees are consuming the largest build times.\n\nTo determine the name to be printed Broccoli will first look for a `.description`\nproperty on the plugin instance then fall back to using the plugin constructor's name.\n\n## Security\n\n* Do not run `broccoli serve` on a production server. While this is\n  theoretically safe, it exposes a needlessly large amount of attack surface\n  just for serving static assets. Instead, use `broccoli build` to precompile\n  your assets, and serve the static files from a web server of your choice.\n\n## Get Help\n\n* IRC: `#broccolijs` on Freenode. Ask your question and stick around for a few\n  hours. Someone will see your message eventually.\n* Twitter: mention @jo_liss with your question\n* GitHub: Open an issue on a specific plugin repository, or on this\n  repository for general questions.\n\n## License\n\nBroccoli was originally written by [Jo Liss](http://www.solitr.com/) and is\nlicensed under the [MIT license](LICENSE.md).\n\nThe Broccoli logo was created by [Samantha Penner\n(Miric)](http://mirics.deviantart.com/) and is licensed under [CC0\n1.0](https://creativecommons.org/publicdomain/zero/1.0/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/broccolijs/broccoli/issues"
  },
  "homepage": "https://github.com/broccolijs/broccoli",
  "_id": "broccoli@0.12.3",
  "_from": "broccoli@~0.12.2"
}
