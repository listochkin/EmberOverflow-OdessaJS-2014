{
  "name": "yam",
  "description": "Dead simple storage interface",
  "version": "0.0.12",
  "keywords": [
    "storage",
    "config"
  ],
  "author": {
    "name": "Alex Navasardyan",
    "email": "alex.navasardyan@gmail.com",
    "url": "http://twokul.io"
  },
  "main": "lib/yam.js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/twokul/yam"
  },
  "dependencies": {
    "fs-extra": "^0.8.1",
    "lodash": "^2.4.1",
    "findup": "^0.1.5"
  },
  "devDependencies": {
    "jshint": "~2.3.0",
    "mocha": "*",
    "chai": "^1.9.1",
    "rewire": "^2.0.0"
  },
  "scripts": {
    "test": "jshint lib/*.js test/*.js && mocha --reporter spec test/*-test.js"
  },
  "readme": "yam\n====\n\n[![Build Status](https://travis-ci.org/twokul/yam.svg)](https://travis-ci.org/twokul/yam)\n\nDead simple lazy storage interface.\n\nYam is lazy by default. \"Lazy\" means that it never tries to persist settings unless you ask it to.\n\n#### Yam Constructor\n\n```javascript\nvar yam = new Yam('test');\n```\n\nCode above creates an instance of `Yam`. You can call `get` and `set` on it and it will keep settings\nin the memory until you call `flush`.\n\n```javascript\nyam.flush();\n```\n\nUpon `flush` call, it will persist all the settings to the file (`.test`). Name of the file: '.' + a provided name.\n\n#### Get\n\n```javascript\nyam.get('foo'); // => 'bar'\n```\n\n#### Set\n\n```javascript\nyam.set('foo', 'baz');\nyam.get('foo'); // => 'baz'\n```\n\n#### Remove\n\n```javascript\nyam.remove('foo');\nyam.get('foo'); // => null\n```\n\n#### Clear\n\n```javascript\nyam.clear();\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/twokul/yam/issues"
  },
  "homepage": "https://github.com/twokul/yam",
  "_id": "yam@0.0.12",
  "_from": "yam@0.0.12"
}
