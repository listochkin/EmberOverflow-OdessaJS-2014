{
  "name": "ic-ajax",
  "version": "2.0.1",
  "description": "ember friendly $.ajax wrapper",
  "main": "dist/cjs/main.js",
  "devDependencies": {
    "karma": "^0.10.9",
    "karma-chrome-launcher": "^0.1.2",
    "karma-firefox-launcher": "^0.1.3",
    "karma-html2js-preprocessor": "^0.1.0",
    "karma-qunit": "^0.1.1",
    "karma-script-launcher": "^0.1.0",
    "qunitjs": "~1.12.0",
    "bower": "^1.3.5",
    "rf-release": "^0.1.0",
    "broccoli-cli": "0.0.1",
    "broccoli-dist-es6-module": "^0.2.0",
    "broccoli": "^0.12.2"
  },
  "scripts": {
    "test": "bower install && rm -rf dist && node_modules/.bin/broccoli build dist && node_modules/.bin/karma start --browsers Firefox --single-run",
    "release": "npm test && node_modules/.bin/release"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/instructure/ic-ajax.git"
  },
  "keywords": [
    "ember",
    "ajax"
  ],
  "author": {
    "name": "Ryan Florence"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/instructure/ic-ajax/issues"
  },
  "homepage": "https://github.com/instructure/ic-ajax",
  "dependencies": {},
  "readme": "ic-ajax\n=======\n\n[![Build Status](https://travis-ci.org/instructure/ic-ajax.png)](https://travis-ci.org/instructure/ic-ajax)\n\nEmber-friendly `jQuery.ajax` wrapper.\n\n- returns RSVP promises\n- makes apps more testable (resolves promises with `Ember.run`)\n- makes testing ajax simpler with fixture support\n\nInstallation\n------------\n\n`bower install ic-ajax`\n\n... or ...\n\n`npm install ic-ajax`\n\nModule Support\n--------------\n\nNote the `dist` directory has multiple module formats, use whatever\nworks best for you.\n\n- AMD\n\n  `define(['ic-ajax'], function(ajax) {});`\n\n- Node.JS (CJS)\n\n  `var ajax = require('ic-ajax')`\n\n- Globals\n\n  `var ajax = ic.ajax;`\n\n  All instructure canvas stuff lives on the `ic` global.\n\nAPI\n---\n\nThis lib simply wraps `jQuery.ajax` with two exceptions:\n\n- success and error callbacks are not supported\n- does not resolve three arguments like $.ajax (real promises only\n  resolve a single value). `request` only resolves the response data\n  from the request, while `raw` resolves an object with the three\n  \"arguments\" as keys if you need them.\n\nOther than that, use `request` exactly like `$.ajax`.\n\n```js\nvar ajax = ic.ajax;\n\nApp.ApplicationRoute = Ember.Route.extend({\n  model: function() {\n    return ajax.request('/foo');\n  }\n}\n\n// if you need access to the jqXHR or textStatus, use raw\najax.raw('/foo').then(function(result) {\n  // result.response\n  // result.textStatus\n  // result.jqXHR\n});\n```\n\nSimplified Testing\n------------------\n\nIn order to test newly added code you must rebuild the distribution.\n\n```bash\nbroccoli build dist\n```\n\nAdding fixtures with `defineFixture` tells ic-ajax to resolve the promise\nwith the fixture matching a url instead of making a request. This allows\nyou to test your app without creating fake servers with sinon, etc.\n\nExample:\n\n```js\nic.ajax.defineFixture('api/v1/courses', {\n  response: [{name: 'basket weaving'}],\n  jqXHR: {},\n  textStatus: 'success'\n});\n\nic.ajax.request('api/v1/courses').then(function(result) {\n  deepEqual(result, ic.ajax.lookupFixture('api/v1/courses').response);\n});\n```\n\nTo test failure paths, set the `textStatus` to anything but `success`.\n\n\nContributing\n------------\n\nInstall dependencies and run tests with the following:\n\n```sh\nnpm install\nnpm test\n```\n\nFor those of you with release privileges:\n\n```sh\nnpm run-script release\n```\n\nSpecial Thanks\n--------------\n\nInspired by [discourse ajax][1].\n\nLicense and Copyright\n---------------------\n\nMIT Style license\n\n(c) 2014 Instructure, Inc.\n\n\n  [1]:https://github.com/discourse/discourse/blob/master/app/assets/javascripts/discourse/mixins/ajax.js#L19\n\n",
  "readmeFilename": "README.md",
  "_id": "ic-ajax@2.0.1",
  "_from": "ic-ajax@~2.0.1"
}
